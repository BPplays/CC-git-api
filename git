--===GIT API===
--=============
--Developed by LNETeam from LNET Technologies
--Please remove the 'a' from the end of the file before putting it into your API folder

--Usage: git.get(author,repository,branch,path,saveName, save path), git.view(author,repository,branch,path)


local function edit(file)
-- Error checking
local sPath = 'temp'

local x,y = 1,1
local w,h = term.getSize()
local scrollX, scrollY = 0,0

local tLines = {}
local bRunning = true




local function load(_sPath)
    -- tLines = {}
    -- if fs.exists( _sPath ) then
    --     local file = io.open( _sPath, "r" )
    --     local sLine = file:read()
    --     while sLine do
    --         table.insert( tLines, sLine )
    --         sLine = file:read()
    --     end
    --     file:close()
    -- end
    
    -- if #tLines == 0 then
    --     table.insert( tLines, "" )
    -- end
end

local function save( _sPath )
    -- -- Create intervening folder
    -- local sDir = sPath:sub(1, sPath:len() - fs.getName(sPath):len() )
    -- if not fs.exists( sDir ) then
    --     fs.makeDir( sDir )
    -- end

    -- -- Save
    -- local file = nil
    -- local function innerSave()
    --     file = fs.open( _sPath, "w" )
    --     if file then
    --         for n, sLine in ipairs( tLines ) do
    --             file.write( sLine .. "\n" )
    --         end
    --     else
    --         error( "Failed to open ".._sPath )
    --     end
    -- end
    
    -- local ok = pcall( innerSave )
    -- if file then 
    --     file.close()
    -- end
    -- return ok
end


local function setLeftStatus()
end








-- Actual program functionality begins
-- load(sPath)





-- Cleanup
term.clear()
term.setCursorBlink( false )
term.setCursorPos(1,1)
end

local function requestObject(url_down,sN,mode,sP)
    if not url_down then error('Incorrect statement!') end
    if not sN and mode == 'get' then error('Check mode!') end
    if mode == 'get' then
        local headers_tab = {
            [ "User-Agent" ] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36", -- Overrides the default User-Agent.
            [ "Cache-Control" ] = "no-cache", -- Tells the server not to return a cached version of the content.
        }
        local have_url = false
        local loops = 1
        -- http.request(url_down)
        local requesting = true
        while have_url == false do
            if have_url == false and loops < 3 then
                local cacheBuster = ("%x"):format(math.random(0, 2 ^ 30))
                http.request({url = url_down.."?cb="..cacheBuster.."?timestamp="..tostring(os.epoch), headers = headers_tab})
                local requesting = true
            else
                requesting = false
                break
            end
            while requesting do
                local event, url, site_content = os.pullEvent()
                
                -- local website = http.get(url)
                -- if website then
                if event == "http_success" then
                    -- if url == url_down then
                        if fs.exists(sP) then
                            fs.makeDir(sP)
                        end
                        local respondedText = site_content.readAll()
                        -- local respondedText = website.readAll()
                        local temp = io.open(sP.."/"..sN,'w')
                        temp:write(respondedText)
                        temp:flush()
                        temp:close()
                        site_content.close()
                        have_url = true
                        requesting = false
                        return true
                    -- else
                        -- have_url = false
                        -- requesting = false
                    -- end
                
                elseif event == "http_failure" then
                -- else
                    requesting = false
                    return false
                end
            loops = loops + 1
            if loops > 2 then
                sleep(0)
            end
            end
        end
    end
end

local function compileURL(auth,pro,bran,pat)
    local baseURL = 'https://raw.githubusercontent.com/'..textutils.urlEncode(auth)..'/'..textutils.urlEncode(pro)..'/'..textutils.urlEncode(bran)..'/'..textutils.urlEncode(pat)
    return baseURL
end

local function get_internal(auth,reps,bran,paths,sN,save_path)
    if not auth or not reps or not bran or not paths or not sN then error('Attempt to compile nonexistent terms!') end
    math.randomseed(os.epoch())
    statusCode = requestObject(compileURL(auth,reps,bran,paths),sN,'get',save_path)
    return statusCode
end


function get(table)
    --auth,reps,branch,paths,Save_Name,save_path
    get_internal(table[1],table[2],table[3],table[4],table[5],table[6])
end