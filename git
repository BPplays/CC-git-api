--===GIT API===
--=============
--Developed by LNETeam from LNET Technologies
--Please remove the 'a' from the end of the file before putting it into your API folder

--Usage: git.get(author,repository,branch,path,saveName, save path), git.view(author,repository,branch,path)

local function save_file(sN,sP,site_content)
    if not fs.exists(sP) then
        fs.makeDir(sP)
    end
    local respondedText = site_content.readAll()
    -- local respondedText = website.readAll()
    local temp = io.open(sP.."/"..sN,'w')
    temp:write(respondedText)
    temp:flush()
    temp:close()
    -- site_content.close()
    respondedText = nil
    site_content = nil
    -- have_url = true
    -- requesting = false
    return true
end


local function make_request(url_down,headers_tab)
    math.randomseed((os.epoch("utc")) + math.random(2950886,64684641))
    local cacheBuster = ("%x"):format(math.random(0, 2 ^ 30))
    local requested_url = url_down .. "?cb=" .. cacheBuster .. "&timestamp=" .. tostring(os.epoch("utc"))
    http.request({
        url = requested_url,
        headers = headers_tab
    })
    return true, requested_url
end

local function requestObject(url_down,sN,sP)
    local requested_url = url_down
    local headers_tab = {
        [ "User-Agent" ] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36", -- Overrides the default User-Agent.
        [ "Cache-Control" ] = "no-cache, no-store", -- Tells the server not to return a cached version of the content.
    }
    local have_url = false
    local loops = 1
    local req_make = false
    -- http.request(url_down)
    local requesting = false
    while have_url == false do
        if have_url == false then
            req_make, requested_url = make_request(url_down,headers_tab)
            if req_make then
                requesting = true
            end
        end
        if loops > 15 then
            have_url = false
            requesting = false
            break
        end
        while requesting do
            local event, url, site_content = os.pullEvent()
            
            -- local website = http.get(url)
            -- if website then
            if event == "http_success" then
                if url == requested_url then
                    if site_content ~= nil then
                        if save_file(sN,sP,site_content) then
                            have_url = true
                            requesting = false
                        end
                        site_content.close()
                        site_content = nil
                    end
                else
                    if loops >= 2 then
                        print(requested_url)
                        print("")
                        print(url)
                    end
                    have_url = false
                    requesting = false
                end
            
            elseif event == "http_failure" then
                if site_content ~= nil then
                    site_content.close()
                end
                -- else
                event = nil
                url = nil
                site_content = nil

                have_url = false
                requesting = false
                if loops > 15 then
                    have_url = true
                    break
                end
            end
        end
        loops = loops + 1
        if loops >= 2 then
            local temp_sleep = loops / 10
            if temp_sleep > 1 then
                temp_sleep = 1
            end
            sleep(temp_sleep)
        end
    end
    return false
end

local function compileURL(auth,pro,bran,pat)
    local baseURL = 'https://raw.githubusercontent.com/'..textutils.urlEncode(auth)..'/'..textutils.urlEncode(pro)..'/'..textutils.urlEncode(bran)..'/'..textutils.urlEncode(pat)
    return baseURL
end

local function get_internal(auth,reps,bran,paths,sN,save_path)
    math.randomseed(os.epoch())
    statusCode = requestObject(compileURL(auth,reps,bran,paths),sN,save_path)
    return statusCode
end


function get(table)
    --auth,reps,branch,paths,Save_Name,save_path
    get_internal(table[1],table[2],table[3],table[4],table[5],table[6])
end